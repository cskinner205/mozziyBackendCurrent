(()=>{var e={17:e=>{e.exports={datatosend:"<p>Your privacy is very important to us. Accordingly, we have developed this Privacy Policy so that you will understand how we collect, use, and disclose information that we receive through our Service. We own the Service website and the App. This Privacy Policy does not apply to any third party websites, services, or applications, even if they are accessible through our Service. Also, please note that, unless we define a term in this Privacy Policy, all capitalized terms used in this Privacy Policy have the same meanings as in our Terms of Service. So, please make sure that you have read and understand our Terms of Service.<p><h2>User Consent</h2><p>By accessing or otherwise using the Service, you agree to the terms and conditions of this Privacy Policy and the associated Terms of Service (Terms) and you expressly consent to the processing of your Personal Information (as defined below) and Anonymous Information (as defined below) according to this Privacy Policy.</p><p>Your Personal Information may be processed by us in the country where it was collected and transferred to, and maintained on, computers located outside of your state, province, country (including the United States), or other governmental jurisdiction where privacy laws regarding processing of Personal Information may be less stringent than the laws in your country. If you are located outside the United States and choose to provide your Personal Information to us, then we may transfer your Personal Information to the United States and process it there.</p><h2>Regarding Children</h2><p>Children under the age of 18 are not permitted to use the Service without supervision and we do not intentionally collect or maintain Personal Information from those who are under 18 years old. Protecting the privacy of children is very important to us. If we obtain actual knowledge that a user is under 13, we will take steps to remove that user’s Personal Information from our databases. We recommend that children between the ages of 13 and 18 obtain their parent’s permission and supervision before submitting information over the internet. By using the Service, you are representing that you are at least 18 years old, or that you are at least 13 years old and are being supervised by your parents when using the Service. We do permit parents and legal guardians of children under 13 years of age to provide the child’s information within the parent or legal guardian’s account for purposes of gathering photos of the child at events they attend.</p><h2>Collection and Use of Information</h2><p>Our Service is designed to help you more easily identify photos of yourself, to share those photos with other users, and to connect and share photos with friends and other users.</p><p>Our primary goals in collecting information are to provide and improve our Service, to administer your use of the Service (including your Account, if you are an Account holder), and to enable you to enjoy and easily navigate our Service.</p><h2>Personal Information</h2><p>In general, we collect information that can be used to identify you, such as your name, email address, and phone number (“Personal Information”) that you submit to us voluntarily through the Service, including Personal information that you submit in the process of creating or editing your Account and user profile on the Service. For example, our registration and login process requires you to provide us with your name, mobile phone number, valid email address, and password of your choice.</p><p>When you personalize your profile and use the features of the Service, we will collect any Personal Information you voluntarily provide, and we may also request optional non-personal information to support your use of the Service, such as your year of birth, gender, and other demographic information. We refer to such information as “Anonymous Information” because it cannot be used by itself to identify you and therefore is not Personal Information. We collect information in the form of the Content that you submit during your use of the Service, such as photos, comments, ratings, and other information you choose to submit.</p><p>We also collect the information you provide when you use the Service. This can include information in or about the Content you provide, such as the location of a photo or the date a file was created. If you connect to us from a social network, we also will be able to access and collect Personal Information about you and your friends that your privacy settings on the social network permit us to access. For instance, we may collect your user ID or profile information that you have permitted to be displayed through the Service in order to display you as a friend or in association with your profile and collections.</p><p>When you order our for-fee products or services, you will need to submit Personal Information such as your credit card number, postal address, or other payment information so that our service providers can process your payment for those products and services. If you choose to sign up to receive information about products or services that may be of interest to you, we will collect your email address and all related information. Additionally, we collect any information that you voluntarily enter, including Personal Information, into the Service including the App.</p><h2>Use of Facial Recognition Data</h2><p>We do not sell, trade, or rent any Personal Information derived from our use of facial recognition technology. As detailed below, we use a variety of reasonable, industry-standard security technologies and administrative, physical, and electronic procedures to help protect your Personal Information, including information derived from our use of facial recognition technology, from unauthorized access, use, or disclosure. We may provide secure access to this information with third party service providers who work on our behalf to administer and provide certain components or features of the Service.</p><p>We will retain and store Personal Information derived from the facial recognition technology for as long as you have an active Account on the Service. Personal Information derived from facial recognition technology will be deleted or destroyed through a secure manner. If you are a parent or guardian and believe that we might have inadvertently collected any personal information from your child under the age of 18 through the Service, then please contact us and request that information be deleted or destroyed.</p><h2>Device Information</h2><p>We collect information from and about the computers, phones, or other devices where you install or access the Service, depending on the permissions you have granted. We may associate the information we collect from your different devices to provide a better or more consistent experience. Information we may collect includes device identifiers, user settings, and the operating system of your device, as well as information about your use of our Service.</p><h2>Location Information</h2><p>When you use our App, we may collect and store information about your location by converting your IP address into a rough geo-location or by accessing your mobile device’s GPS coordinates or coarse location if you enable location services on your device. We may use location information to improve and personalize our Service for you, such as to identify photos of you near a particular location. If you do not want us to collect location information, you may disable that feature on your mobile device. However, if you disable the location services feature on your mobile device after using the App, we cannot remove any historic location data unless you delete your Account.</p><h2>Personal Information from Other Sources</h2><p>We may receive Personal Information about you from other sources with which you have registered, companies with whom we have partnered with or other third parties. We may associate this information with the other Personal Information we have collected about you.</p><h2>E-mail and SMS and Email Addresses and Mobile Numbers</h2><p>If you send an e-mail or SMS to us, or fill out a “Feedback” or similar form through the Service, we will collect your e-mail address or mobile number and the full content of your e-mail or SMS, including attached files, and other information you provide. We may use and display your full name and email address or mobile number when you send an email or SMS notification to a friend through the Service or the social network from which you have connected to the Service (such as in an invitation, or when sharing your content). Additionally, we use your email address or mobile number to contact you on behalf of your friends (such as when someone sends you a personal message) or notifications from a social network or other website with whom you have registered to receive such notifications. We may use this e-mail address or mobile number to contact you, for things such as notifications of photos you have been found in, opportunities to purchase the photos, or limited-time promotional opportunities. You may indicate your preference to stop receiving further promotional communications as further detailed below.</p><h2>Information Collected Automatically</h2><p>As you use the Service, certain information about how a person uses our Service may also be passively collected and stored on our or our service providers’ server logs, including your Internet protocol address, browser type, and operating system. We also use navigational data like Uniform Resource Locators (URL) to gather information regarding the date and time of your visit and the solutions and information for which you searched and viewed, or on which of the advertisements displayed on the Service you clicked. This type of information is collected to administer the Service, to make the Service more useful to you, to tailor your experience with the Service to meet your special interests and needs, and to analyze (and have third parties analyze) the information to improve, customize and enhance our Service.</p><p>An “Internet protocol address” or “IP Address” is a number that is automatically assigned to your computer when you use the Internet. In some cases your IP Address stays the same from browser session to browser session; but if you use a consumer internet access provider, your IP Address probably varies from session to session. For example, we, or our service providers, may track your IP Address when you access the Service to assist with ad targeting.</p><p>“Cookies” are small pieces of information that a website sends to your computer’s hard drive while you are viewing a website. We may use both session Cookies (which expire once you close your web browser) and persistent Cookies (which stay on your computer until you delete them) to tell us how and when you interact with our Services, to monitor aggregate usage and web traffic routing on our Service, to improve our Service, and to provide you with a more personal and interactive experience with the Service. Persistent Cookies can be removed by following your Internet browser help file directions. In order to use our Service, your web browser must accept Cookies. If you choose to disable Cookies, some aspects or features of the Service may not work properly, and you will not be able to receive our Service.</p><p>We may also enable advertisers and ad servers to promote third party products and/or services by placing advertisements on the Service. These advertisers and ad servers may use Cookies and/or “Web Beacons” (which are usually small, transparent graphic images). Web Beacons are used in order to deliver or communicate Cookies, to track and measure the performance of our Service, to monitor how many visitors view our Service, and to monitor information related to the effectiveness of served advertisements. Clicking on such advertisements will direct you to the website of a third party and the advertiser. This Privacy Policy covers only our use of Cookies and Web Beacons and does not cover the use of Cookies, Web Beacons, and other privacy practices of any advertisers or ad servers.</p><h2>Use and Disclosure of Information</h2><p>Except as otherwise stated in this Privacy Policy, we do not sell, trade, rent, or share your Personal Information with third parties, unless you ask or authorize us to do so.</p><p>Personal Information you submit to us is used by us to provide you access to the Service, to improve the Service, to better tailor the features, performance, and support of the Service, and to offer you additional information, opportunities, promotions, and functionality from us, our partners or our advertisers at your request. Additionally, we do share your content preferences and other information with the social network from which you have connected to the Service, along with those companies and persons you have asked us to share your information with.</p><p>We may provide your Personal Information to third party service providers who work on behalf of or with us to administer and provide some of the services and features of the Service and to help us communicate with you. Examples of such services include sending email, analyzing data, providing marketing assistance, processing payments (including credit card payments), quality control (such as manually or mechanically comparing reference images with Content matches to determine the accuracy of matches), creating biometric identifiers and providing customer service. We require our third party service providers to promise not to use such information except as necessary to provide the relevant services to us and not to disclose or use your Personal Information for any other purpose. We may also share aggregated information and Anonymous Information with third parties for research and analysis, demographic profiling, and other similar purposes.</p><p>We may share some or all of your Personal Information with our third party partners, namely those partners who own the events you join and those with whom we have a co-branding or promotional relationship, or other third parties about whom you are otherwise notified and do not request to opt-out of such sharing. This Privacy Policy does not cover the use of your Person Information by such third parties. We do not maintain responsibility for the manner in which third parties, including, without limitation, social networks, other partners, and advertisers, use or further disclose Personal Information collected from you in accordance with this Privacy Policy, after we have disclosed such information to those third parties. If you do not want us to use or disclose Personal Information collected about you in the manners identified in this Privacy Policy, you may not use the Service.</p><p>Although we currently do not have a parent company, any subsidiaries, joint ventures, or other companies under a common control, we may in the future, and we may share some or all of your Personal Information with these companies, in which case we will require them to honor this Privacy Policy.</p><p>Information that we collect from our users, including Personal Information, is considered a business asset. In the event we go through a business transition such as a merger, acquisition by another company, or sale of all or a portion of our assets, your Personal Information may be among the assets transferred. You acknowledge that such transfers may occur and are permitted by this Privacy Policy.</p><p>We cooperate with government and law enforcement officials or private parties to enforce and comply with the law. We may disclose your Personal Information to government or law enforcement officials or private parties if we believe in good faith that such disclosure is necessary or appropriate to (a) comply with relevant laws and to stop any activity that we consider illegal, unethical, or legally actionable activity; (b) to respond to claims, subpoenas or warrants served on us; or (c) to protect and defend our rights, property, and safety and the rights, property, and safety or you or third parties. You hereby consent to us sharing your Personal Information under the circumstances described herein.</p><h2>The Ability of others to View your Information</h2><p>Helping you to protect your information is a vital part of our mission. It is up to you to make sure you are comfortable with the information you choose to provide us and the information you choose to publish. You understand that when you use the Service, certain information you post or provide through the Service, such as your name, profile, comments, posts, and ratings, may be shared with other users and posted on publicly available portions of the Service, including without limitation, chat rooms, bulletin and message boards, along with other public forums. Please keep in mind that if you choose to disclose Personal Information when posting comments or other information or content through the Service, this information may become publicly available and may be collected and used by others, including “outside” the Service. We will not have any obligations with respect to any information that you post to parts of the Service available to others, and recommend that you use caution when giving out Personal Information to others in public forums online or otherwise. We also share the information you publish with other third parties as set forth in this Privacy Policy.</p><h2>Responding to Do Not Track Signals</h2><p>Our website does not have the capability to respond to “Do Not Track” signals received from various web browsers.</p><h2>Third Party Sites and Advertising</h2><p>The Service may contain links to other websites. Please be aware that we are not responsible for the privacy practices or the content of such other websites. Any information that you provide on or to a third party website or that is collected by a third party service is provided directly to the owner or operator of the third party website or service and is subject to the owner’s or operator’s privacy policy. We encourage our users to read the privacy statements of each and every website they visit and service they use. This Privacy Policy applies solely to information collected by us through the Service and does not apply to these third party websites. The ability to access information of third parties from the Service, or links to other websites or locations, is for your convenience and does not signify our endorsement of such third parties, their products, their services, other websites, locations or their content.</p><h2>Your Choices Regarding Your Personal Information</h2><p>We offer you choices regarding the collection, use, and sharing of your Personal Information. Please note that if you decide not to provide us with the Personal Information that we request, you may not be able to access all of the features of the Service.</p><p>We may periodically send you free newsletters and e-mails that directly promote our Service. When you receive promotional communications from us, you may indicate a preference to stop receiving further promotional communications from us and you will have the opportunity to “opt-out” by following the unsubscribe instructions provided in the promotional e-mail you receive or by contacting us directly (please see contact information below).</p><p>Despite your indicated email preferences, we may send you administrative emails regarding the Service, including, for example, matching image alerts, administrative confirmations, notices of updates to our Privacy Policy or Terms of Service, and information about billing if we choose to provide such notices to you in this manner. You will not be able to opt-out of those communications.</p><p>You may change any of your profile information, including any Personal Information associated with your Account, by editing it in the profile settings page. You may request deletion of your Personal Information and Account by contacting us, but please note that we may be required (by law or otherwise) to keep this information and not delete it (or to keep this information for a certain time, in which case we will comply with your deletion request, only after we have fulfilled such requirements). When we delete Personal Information, it will be deleted from the active database.</p><h2>Security</h2><p>We are committed to protecting the security of your Personal Information. We use a variety of reasonable, industry-standard security technologies and administrative, physical, and electronic procedures to help protect your Personal Information from unauthorized access, use, or disclosure. Even though we have taken significant steps to protect your Personal Information, no company, including us, can fully eliminate security risks associated with Personal Information. Accordingly, we cannot and do not guarantee the absolute security of any information. Rather, you assume the risk.</p><h2>Contact and Revisions</h2><p>Any information that is collected via our Service is covered by the Privacy Policy in effect at the time such information is collected. This Privacy Policy is subject to occasional revision at our discretion, and if we make any substantial changes in the way we collect, use, or disclose your Personal Information, we will post an alert on the Service and we will update the “Last Updated Date” above to indicate when those changes will become effective. If you object to any such changes, you must cease using the Service. Continued use of the Service following notice of any such changes shall indicate your acknowledgement of such changes and agreement to be bound by the terms and conditions of such changes.</p>"}},336:e=>{"use strict";e.exports=require("aws-sdk")},96:e=>{"use strict";e.exports=require("bcrypt")},986:e=>{"use strict";e.exports=require("body-parser")},142:e=>{"use strict";e.exports=require("dotenv")},860:e=>{"use strict";e.exports=require("express")},907:e=>{"use strict";e.exports=require("fcm-node")},509:e=>{"use strict";e.exports=require("firebase-admin")},344:e=>{"use strict";e.exports=require("jsonwebtoken")},13:e=>{"use strict";e.exports=require("mongodb")},738:e=>{"use strict";e.exports=require("multer")},174:e=>{"use strict";e.exports=require("stripe")},147:e=>{"use strict";e.exports=require("fs")},37:e=>{"use strict";e.exports=require("os")},84:e=>{"use strict";e.exports=JSON.parse('{"type":"service_account","project_id":"mozziy-401505","private_key_id":"b439b51dd074e5b6e9b76996fd62de686c344e48","private_key":"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCun8R9KIQZoD5y\\nBDQqFDDpDA1MF9hUWaRXgLKdDcn8Q9cyezQ7JOocOW+OadBXcGPec3l/sBJDO1Eb\\n/ui+JBLi5xljaWP7XBIlcTTzTasd/zUYj+AE+i+t1PdCPFAIgUU9IqZBEqYnK1Do\\nSLF4Yjz+qtwK6nqdn4/RqdsDX+cSL1neFgPheC6pcR4re9bDzDSosp5ok7lumNj+\\nosChqKJ12cbnoIYh2HVHzndYX3OWFXeykgitDRGEoaEa4gU/N6O8grOSuEr1LIQA\\n3lQP1gbBsyeBzLHyTfEfrl8A8aC0pl39rQo+At4IZ7h8XOWMjGxvNMpXN/FsA3Cw\\nhFYCsdQNAgMBAAECggEACOy+eJ0Y/0xK1L31Qo9MnqSQi2qOkmUQeq5nspIxWBTJ\\ni1lzpnAxDOc8ld0/mjBy0jw5ofaIQGpoL1OcZpdmZbVk/Uk2JHMktEgwahz2mW5h\\nMtOroeV9iVdgmcCGYKDmvoSmVZ4T4t2aYXzRoTL4JhXqcB5izOqKSa9yM55zq2Ct\\ni9jEe9es32V+xcFurI0C82UH14WTCfxi7sRylrjeGQ3hySMQn5Qpb9ZBUSGDOWAa\\nETqmtj5QfJrhyFAs8o3Ib7DGl7gRi9XOCQgasAxFX+jU8QCBxGMD73IYnTm2Y3ks\\nnB2tQQb7uU697M/6pp9954r4f8YqLeIhYBUHjhveOwKBgQDXkSzPYBPKR3tPsFiE\\n91PWbVYCXqI3kSiqXYcHp6uhJS7+xA0Kg+grMsOR4s/JpFrDKos2bKMgLBrh/iMm\\ngzsVRXT52EWSO6z5qLABnpHSm9DL/zQ7sabihgvWEdBn69qfyFf7brZx3SWb+0zr\\nHGp1ZCZdrpeVjJZ0AxDFaZ+QgwKBgQDPYKTaHo6QjaZOokEOUBsCcouOqOJyMT+n\\n32hHC69d4II1xn8h/hpmlyYX6UnHwp+6404FDAUAEIo7kAETfcFmpbxYSAVoSkRH\\nhP7+2viow+ycQitqORpJrtd1Jw0S8AmbLnhNPKaXBgovfiCQ9S9qGtk596RMbiwK\\nYV+RbZbELwKBgQDR+NrI9DDSq2X1bTQL8E19Y+qPTFZ+Aaq2p3tLfYqz4GAyUAzT\\n3UBcM4pDo8X6B1lRGTOYw6DxSYS19LGQZes7APi8FGlP00jdte4a5bXsi1GKIv9h\\n1d1UcHU/AwMY9qdxU9g/VMvphRuJH/MAYCFiTzb/sXx9cv9p6UKAyC1guQKBgCew\\niHySgpiZ861zEl5p6HF0eM9J9WUDlfpMIMoQK3UdJe6i2ewolObzoL/Mz2kjD60W\\nGfWPUlmr0LkLm5keZWh+6eg/iIFoTV8ezir6v8KVFPDnHSYMXcKiauwqGC96r2v6\\n3d1ycTPQXRyv2A3GT1fQYajdg515LIakEkVkIwnTAoGBAJTZePPBrcOKUHKrODAL\\ne5/5Ncbdo+s71PEj+oDfZQZcjf6eMTOXHINQvlb0V4qJIBHOOaAnXGmR92jUGP2G\\nMuNUbL3u79LAKGNpaM0lyy/kM38EQnGsX+J4B1F6mzS9tJmhbwOMJ/2XtoQOL5oC\\nMgj/85w+QLVc+Aye6qNEQBRh\\n-----END PRIVATE KEY-----\\n","client_email":"firebase-adminsdk-ctopm@mozziy-401505.iam.gserviceaccount.com","client_id":"112338195120772480182","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url":"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-ctopm%40mozziy-401505.iam.gserviceaccount.com","universe_domain":"googleapis.com"}')}},o={};function t(s){var n=o[s];if(void 0!==n)return n.exports;var a=o[s]={exports:{}};return e[s](a,a.exports,t),a.exports}(()=>{const e=t(860),o=e(),{MongoClient:s,ObjectId:n}=t(13);t(142).config();const a=t(344),i=t(96),r=new s(process.env.MONGODB_URL),c=t(738),l=process.env.PORT,d=process.env.AWS_ACCESS_KEY,u=process.env.AWS_SECRET_ACCESS_KEY,h=process.env.STRIPE_SECRET_KEY,m=t(336),y=(t(147),t(986));o.use(y.json()),o.use(y.urlencoded({extended:!0})),o.use("/uploads",e.static("uploads"));const p=t(509);new(t(907))("AAAAtmLyFwM:APA91bFbiHUZcKZJKgJebaA8jogP5uD8u_f2R4MQSuRIzuQHafMqIbniPwXxLEYP8IFS6Dme-QXerd9XV-QqvN3ZA292btgtsCL0eacqDeoSm26Eda5PtbxgzZIn2V8DkdYNrT5poYWy");const g=t(84),{datatosend:f}=t(17),{userInfo:w}=t(37);m.config.update({region:"us-east-1",accessKeyId:d,secretAccessKey:u});const v=new m.Rekognition,b=new m.S3;o.use(e.json());const I=c();o.post("/api/faceScanner",I.array("images"),(async(e,o)=>{try{let t=[];if(console.log("faceScanner api is hit @"),!e.files||!e.files.length)return o.status(400).send("No files were uploaded.");e.files.forEach((async e=>{const s={S3Object:{Bucket:"find-my-face-2",Name:e.location}},n={Image:s};try{if(!((await v.detectFaces(n).promise()).FaceDetails.length>0))return void o.json({msg:"No faces were detected in the image."})}catch(e){console.error("Error:",e),o.json(e,"source image")}await r.connect();const a=r.db("mozziy_new").collection("Event"),i=await a.find({}).toArray(),c=await Promise.all(i.map((async e=>{if(e?.fileData){let n=e.fileData.path?e.fileData.path:e.fileData.Location;try{const a={S3Object:{Bucket:"find-my-face-2",Name:n}};try{const o={Image:a};if((await v.detectFaces(o).promise()).FaceDetails.length>0){const o={SourceImage:s,TargetImage:a,SimilarityThreshold:90},{FaceMatches:n}=await v.compareFaces(o).promise();n&&n.length>0?await Promise.all(n.map((o=>{const s=o.Similarity;console.log("similarity:",s),t.push(e),console.log(t,"finalResult000000")}))):console.log("No matching faces found.")}}catch(e){console.error("Error:",e),o.json(e,"target image")}}catch(e){console.log(e),o.json(e)}}})));try{c&&(console.log(t,"finalResult313132132132"),t.length>0?o.json(t):o.json({msg:"No matching faces found."}))}catch(e){console.log("error of daata",e)}}))}catch(e){console.log("errrrro=>>",e),console.log("err.__type",e.__type),console.log("err.__type",e.Code),fResult={message:e,status:400}}})),o.post("/api/uploadProfilePicture",I.array("images"),(async(e,o)=>{try{if(console.log("uploadProfilePicture api is hit @"),!e.files||!e.files.length)return o.status(400).send("No files were uploaded.");const t="find-my-face-2",s=[];console.log("req.body.userId",e.files),e.files.map((async a=>{console.log("value",a);const i=a.originalname,c=a.buffer,l={Bucket:t,Key:i,Body:c,ContentType:a.mimetype};console.log("imagePath",i);const d=await b.upload(l).promise();console.log("@@@",d),d.path=d.Location,s.push(d);const u={Image:{S3Object:{Bucket:"find-my-face-2",Name:i}}};try{if(!((await v.detectFaces(u).promise()).FaceDetails.length>0))return void o.status(400).send({msg:"No faces were detected in the image. Please upload another Profile Picture",status:!1,statusCode:400})}catch(e){console.error("Error:",e),o.json(e,"source image")}await r.connect();const h=r.db("mozziy_new").collection("User"),m=await h.findOneAndUpdate({_id:new n(e.body.userId)},{$set:{profile_Image:d}},{upsert:!0,returnDocument:"after"});m&&o.send({msg:"Profile Updated successfully",status:!0,imageData:m.profile_Image,statusCode:200})}))}catch(e){console.log(e),o.status(400).send({msg:e,status:!1,statusCode:400})}}));const S=t(174)(h);o.post("/api/create-payment-intent",(async(e,o)=>{try{await r.connect();const t=r.db("mozziy_new").collection("Event"),s=await t.findOne({_id:new n(e.body.id)});if(s){let e=100*s.price;const t=(await S.paymentIntents.create({amount:e,currency:"usd",payment_method_types:["card"],statement_descriptor:"Custom descriptor",description:"For Buying Photo"})).client_secret;o.send({clientSecret:t})}}catch(e){console.log("errr",e),o.send({err:e})}})),o.post("/api/upload",I.array("images"),(async(e,o)=>{if(console.log("upload events is run"),console.log("upload events is run"),console.log("upload events is run"),console.log("upload events is run"),!e.files||!e.files.length)return o.status(400).send("No files were uploaded.");try{const t="find-my-face-2",s=[],a=Promise.all(e.files.map((async e=>{const o=e.originalname,n=e.buffer,a={Bucket:t,Key:o,Body:n,ContentType:e.mimetype},i=await b.upload(a).promise();console.log("$$$$$$$",i),s.push(i)})));let i=[];a.then((()=>{console.log("attat1111",s)})).then((()=>{Promise.all(e.files.map((async(o,t)=>{console.log("helloe=>",s),console.log("index",t),s[t].path=s[t].Location,console.log("****=>",s[t]);let a={userForeignKey:new n(e.body.userId),fileData:s[t],category:e.body.category,photoTitle:e.body.photoTitle,photoDescription:e.body.photoDescription,price:Number(e.body.price),isFavorite:!1,createdAt:(new Date).toISOString()};console.log("this is the data",a),i.push(a)})))})).then((async()=>{if(!e.files)return console.log("we are heere111"),o.status(400).json({message:"No file provided",status:400});{await r.connect();const e=r.db("mozziy_new").collection("Event");console.log("totalData",i);const t=await e.insertMany(i);console.log("whether data is inserted in mongoDb",t),t.acknowledged&&o.json({message:"Uploaded successfully"})}}))}catch(e){console.log("This is the error=>",e),o.status(400).send({msg:e.message,statusCode:400})}})),o.get("/api/test",((e,o)=>{o.send("HAI GET API HIT test")})),o.get("/test",((e,o)=>{console.log("this is run"),o.send({msg:"This is run successfully"})})),o.post("/register",(async(e,o)=>{let t;console.log("register api is hit");try{await r.connect();const s=r.db("mozziy_new").collection("User");if(await s.findOne({email:e.body.email}))return o.status(400).send({message:"Failed! Email is already in use!",statusCode:400});{let o=i.hashSync(e.body.password,10),n={name:e.body.name,email:e.body.email,password:o,createdAt:(new Date).toISOString(),signedByGoogle:!1};const a=await s.insertOne(n);console.log("Inserted document ID:",a.insertedId),a.insertedId&&(t="success")}}catch(e){console.error("Error:",e),e&&(t={msg:e,status:500,success:!1})}finally{r.close()}console.log("RESISTER API IS HIT "),o.send({msg:t})})),o.post("/createStripeAccount",(async(e,o)=>{console.log("createStripeAccount is run"),console.log(e.body),await r.connect();const t=r.db("mozziy_new").collection("User"),s=await t.findOne({_id:new n(e.body.id)});try{const e=await S.accounts.create({country:"US",type:"express",email:s.email,capabilities:{card_payments:{requested:!0},transfers:{requested:!0}}});console.log("account",e,"account"),await r.connect();const t=r.db("mozziy_new").collection("User");let n=await t.findOneAndUpdate({email:s.email},{$set:{connectAccountId:e.id}});console.log(n,"rsult");const a=await S.accountLinks.create({account:e.id,refresh_url:"http://app://deepLink",return_url:"http://54.204.136.191:5000/redirecttoapp",type:"account_onboarding"});console.log("accountLink @@@@",a,"accountLink @@@@"),o.json({accountid:e.id,type:e.type,accountLink:a,msg:n?"created the connect account":"error"})}catch(e){console.log(e),o.json({err:e})}})),o.get("/redirecttoapp",((e,o)=>{o.writeHead(301,{Location:"app://deepLink"}).end()})),o.post("/loginWithGoogle",(async(e,o)=>{try{console.log("login with google api is hit"),await r.connect(),console.log("req.body",e.body),console.log("1111");const t=r.db("mozziy_new");console.log("2222");const s=t.collection("User");let{email:n,name:a}=e.body;console.log("email",n),console.log("3333");const i=await s.findOne({email:n});if(console.log("user",i),console.log("4444"),i)i.signedByGoogle?o.status(200).send({id:i._id,msg:"Authorized User! Redirect to login page",signedByGoogle:!0,statusCode:200,profile_Image:i?.profile_Image?i?.profile_Image:null,userName:i.name,isNotifyUserEnabled:i?.isNotifyUserEnabled?i?.isNotifyUserEnabled:null}):!1===i.signedByGoogle&&o.status(409).send({msg:"Email already exists!. Please sign in by email and password",signedByGoogle:!1,statusCode:409});else{data={email:n,name:a,image:e?.body?.photo?e?.body?.photo:null,emailVerified:null,createdAt:(new Date).toISOString(),signedByGoogle:!0};const t=await s.insertOne(data);t.insertedId&&o.status(200).send({message:"User Created Successfully",id:t.insertedId,signedByGoogle:!0,status:200})}}catch(e){console.error("Errors>>>>:",e),o.status(500).send({message:e.msg,signedByGoogle:!0,status:500})}finally{r.close()}})),o.post("/api/login",(async(e,o)=>{try{console.log("login api is run@@@@"),console.log("req.body",e.body),await r.connect();const t=r.db("mozziy_new").collection("User"),s=await t.findOne({email:{$regex:new RegExp(e.body.email,"i")}});s?s.signedByGoogle?(o.status(400).send({success:!1,message:"Please Login with google Id",statusCode:400}),console.log("asdlkasioduh22222")):i.compare(e.body.password,s.password,((e,t)=>{if(e&&console.log(e),t){const e={userId:s._id,username:s.name},t=process.env.JWT_SECRET_KEY,n=a.sign(e,t);o.status(200).send({id:s._id,token:n,msg:"Authentic User",signedByGoogle:!1,statusCode:200,profile_Image:s?.profile_Image?s?.profile_Image:null,userName:s.name,isNotifyUserEnabled:s?.isNotifyUserEnabled?s?.isNotifyUserEnabled:null})}else o.status(400).send({success:!1,message:"Invalid Email or password",statusCode:400})})):o.status(400).send({success:!1,message:"Invalid Email or password",statusCode:400})}catch(e){console.error("Error:",e),e&&(console.error(e),o.status(500).send({msg:e,status:500}))}})),o.post("/api/getAllEvents",(async(e,o)=>{try{console.log("req.body",e.body),console.log("this is running getAllEvents"),await r.connect();const t=r.db("mozziy_new"),s=t.collection("Event"),a=t.collection("Favorites"),i=await a.find({user_id:new n(e.body.userId)}).toArray(),c=await s.find().toArray();let l={favouriteEventsIds:i.map((e=>e.event_id)),allEvents:c,status:!0};i&&c&&o.send(l)}catch(e){console.log(e),o.status(400).send({message:e,status:400,statusCode:400})}})),o.post("/api/loginWithApple",(async(e,o)=>{try{console.log("login with Apple api is hit"),await r.connect(),console.log("req.body",e.body);const t=r.db("mozziy_new").collection("User");let{email:s,name:n,id:a}=e.body;const i=await t.findOne({appleId:a});if(i)i.signedByApple?o.status(200).send({id:i._id,msg:"Authorized User! Redirect to login page",signedByApple:!0,statusCode:200,profile_Image:i?.profile_Image?i?.profile_Image:null,userName:i.name,isNotifyUserEnabled:i?.isNotifyUserEnabled?i?.isNotifyUserEnabled:null}):!1===i.signedByApple&&o.status(409).send({msg:"Email already exists!. Please sign in by email and password",signedByApple:!1,statusCode:409});else{data={email:s,name:n,image:e?.body?.photo?e?.body?.photo:null,emailVerified:null,createdAt:(new Date).toISOString(),signedByApple:!0,appleId:a};const i=await t.insertOne(data);i.insertedId&&o.status(200).send({message:"User Created Successfully",id:i.insertedId,signedByApple:!0,status:200})}}catch(e){console.error("Errors>>>>:",e),o.status(500).send({message:e.msg,signedByGoogle:!0,status:500})}finally{r.close()}})),o.post("/api/getFeedEvents",(async(e,o)=>{let t=[];try{console.log("------------********getFeedEvents Api is run********-------------"),await r.connect();const s=r.db("mozziy_new"),a=s.collection("User"),i=s.collection("Favorites"),c=(await i.find({user_id:new n(e.body.userId)}).toArray()).map((e=>e.event_id)),l=await a.findOne({_id:new n(e.body.userId)});if(console.log("focus=>",l),!l)return o.status(400).json({message:"User not exist",statusCode:400});if(!l.hasOwnProperty("profile_Image"))return o.status(200).json({message:"Please update your profile pic",statusCode:200,allEvents:[]});let d=l.profile_Image.path?l.profile_Image.path:l.profile_Image.Location;console.log("we are here");const u={S3Object:{Bucket:"find-my-face-2",Name:d}};console.log("we are here22");const h=s.collection("Event"),m=await h.find({}).toArray();console.log("we are here333");try{await Promise.all(m.map((async e=>{if(console.log("we are here44444"),e?.fileData){const o={S3Object:{Bucket:"find-my-face-2",Name:e.fileData.path?e.fileData.path:e.fileData.Location}};console.log("we are here555555");const s={Image:o};console.log("we are here66666"),console.log("we are here787777"),console.log("this is the id",e._id);try{if((await v.detectFaces(s).promise()).FaceDetails.length>0){const s={SourceImage:u,TargetImage:o,SimilarityThreshold:90},{FaceMatches:n}=await v.compareFaces(s).promise();n&&n.length>0?await Promise.all(n.map((o=>{o.Similarity,t.push(e)}))):console.log("we are here988888888")}console.log("we are here99999999")}catch(e){console.log("error",e)}}})))&&(console.log("*********************DASHBOARD PAGE DATA****************"),console.log("tgis is the data",t),t.length>0?o.status(200).json({allEvents:t,favouriteEventsIds:c,status:!0,statusCode:200}):o.status(200).json({allEvents:t,msg:"No matching faces found.",status:!0,statusCode:200}))}catch(e){console.log("Error=>",e.Message)}}catch(e){console.log("Error=>>>>",e),o.status(400).json({Error:e,statusCode:400})}})),o.delete("/api/deleteEvent",(async(e,o)=>{try{await r.connect();const t=r.db("mozziy_new").collection("Event");console.log(e.body);const s=await t.findOneAndUpdate({_id:new n(e.body.id)},{$set:{isDeletedByOwner:!0}},{upsert:!0,returnDocument:"after"});console.log(s,"result"),s&&o.json({msg:"Deleted Successfully"})}catch(e){console.log(e),o.status(400).send({message:e,status:400})}})),o.post("/api/getEvents",(async(e,o)=>{try{await r.connect();const t=r.db("mozziy_new").collection("Event");let s=(await t.find({userForeignKey:new n(e.body.userId)}).toArray()).filter((e=>!e.isDeletedByOwner));s&&o.status(200).json(s)}catch(e){console.log(e),o.status(400).send({message:e,status:400})}})),o.post("/api/getAllFavoriteEvents",(async(e,o)=>{try{await r.connect();const t=r.db("mozziy_new").collection("Favorites"),s=[{$match:{user_id:new n(e.body.userId)}},{$lookup:{from:"Event",localField:"event_id",foreignField:"_id",as:"additionalInfo2"}},{$unwind:"$additionalInfo2"}],a=await t.aggregate(s).toArray();a&&o.json(a)}catch(e){console.log(e),o.status(400).send({message:e,status:400})}})),o.post("/addEventToFavorite",(async(e,o)=>{try{const{id:t,heart:s,loggedInUserId:a}=e.body;await r.connect();const i=r.db("mozziy_new").collection("Favorites");s?(await i.insertOne({user_id:new n(a),event_id:new n(t),time:(new Date).toISOString()})).insertedId&&o.status(200).send({msg:"Event added to favorites",status:200}):(await i.deleteOne({user_id:new n(a),event_id:new n(t)})).acknowledged&&o.status(200).send({msg:"Event Removed from Favorites successfully",status:200}),r.close()}catch(e){console.log(e),o.status(400).send({message:e,status:400})}})),o.post("/savePurchase",(async(e,o)=>{try{await r.connect();const o=r.db("mozziy_new"),t=o.collection("User"),s=await t.findOne({_id:new n(e.body.owner)});if(""!=s.connectAccountId){const t=s.connectAccountId;console.log("connectId",t),console.log("req.body.stripePayment.paymentIntent.id",e.body.stripePayment.paymentIntent.id),await E(t,e.body.stripePayment.paymentIntent.id);const a=o.collection("purchases");let i={stripePayment:e.body.stripePayment,owner:new n(e.body.owner),purchaser:new n(e.body.purchaser),event_id:new n(e.body.id)};(await a.insertOne(i)).acknowledged&&s.status(200).send({msg:"Purchase saved successfully"})}else s.status(400).send({msg:"No connect account exists",statusCode:400})}catch(e){console.log("Errrrrrrr",e),o.status(400).send({msg:e.message,statusCode:400})}})),o.post("/saveNotification",(async(e,o)=>{try{await r.connect();const t=r.db("mozziy_new").collection("User"),s=await t.findOneAndUpdate({_id:new n(e.body.userId)},{$set:{isNotifyUserEnabled:e.body.data}},{upsert:!0,returnDocument:"after"});console.log("this is the of save notification result",s),s&&o.status(200).send({msg:"Updated successfully",status:!0,statusCode:200,data:{isNotifyUserEnabled:s.isNotifyUserEnabled}})}catch(e){console.log(e),o.status(400).send({msg:e,status:!1,statusCode:400})}})),o.post("/getNotificationStatus",(async(e,o)=>{console.log("i am in getnotificStatus",e.body);try{await r.connect();const t=r.db("mozziy_new").collection("User"),s=await t.findOne({_id:new n(e.body.userId)});console.log("result",s),s&&o.send({msg:"data recieved successfully",status:!0,data:{isNotifyUserEnabled:s.isNotifyUserEnabled}})}catch(e){console.log(e),o.status(400).send({msg:e,status:!1,statusCode:400})}})),o.post("/api/fetchProfileImage",(async(e,o)=>{console.log("i am in fetchProfileImage",e.body);try{await r.connect();const t=r.db("mozziy_new").collection("User"),s=await t.findOne({_id:new n(e.body.userId)});console.log("result",s),s.profile_Image?o.status(200).send({msg:"Profile Image recieved successfully",status:!0,statusCode:200,data:{profile_Image:s?.profile_Image}}):o.status(400).send({msg:"No Profile Image exists",status:!1,statusCode:400})}catch(e){console.log(e),o.status(400).send({msg:e,status:!1,statusCode:400})}})),p.initializeApp({credential:p.credential.cert(g)});const P=async(e,o="Mozziy User")=>{let t=[e];await p.messaging().sendMulticast({tokens:t,data:{notifee:JSON.stringify({body:"Someone has uploaded a photo of you",android:{channelId:"default",actions:[{title:`Congratulations! ${o}`,pressAction:{id:"read"}}]}})}}).then((e=>{console.log("Successfully sent message:",e),console.log("Successfully sent message:",e.responses[0].error),console.log(e.responses[0].error)})).catch((e=>{console.error("Error sending message:",e)}))};o.get("/testSendNoti",((e,o)=>{P("ft8cAB4kSOGAPerPLOMKy0:APA91bHGTJt-h0YMluxkNTvrGci2EZJrpWlwndsitPio1t_74oGh2wgT32zAQZONSb9otoWHw1q4dvB3BjLZ5vTIRPsendp-WQGWJYzi0HktDlT1sfZLtCiZWhO8Qe16Dc717qvJCCqF","testerAPi"),o.status(200).send({msg:"done",statusCode:200})})),o.post("/compareUploadedEventFaceWithProfilePics",I.array("images"),(async(e,o)=>{try{let t=[];if(console.log("compareUploadedEventFaceWithProfilePics api is hit @"),console.log(e.files,"@@"),!e.files||!e.files.length)return o.status(400).send("No files were uploaded.");const s="find-my-face-2";console.log(e.files),e.files.map((async e=>{const n=e.originalname,a=e.buffer,i={Bucket:s,Key:n,Body:a,ContentType:e.mimetype},c=await b.putObject(i).promise();console.log("location2222",c);const l={S3Object:{Bucket:"find-my-face-2",Name:n}},d={Image:l};try{if(!((await v.detectFaces(d).promise()).FaceDetails.length>0))return o.json({msg:"No faces were detected in the image."})}catch(e){console.error("Error:",e),o.status(400).json({error:e+" source image"})}await r.connect();const u=r.db("mozziy_new").collection("User"),h=await u.find({profile_Image:{$exists:1}}).toArray();try{const e=Promise.all(h.map((async e=>{console.log("value.DEviceFcmtoken",e.DEVICEFCMTOKEN),console.log("typeof value.DEviceFcmtoken",typeof e.DEVICEFCMTOKEN);try{const o={S3Object:{Bucket:"find-my-face-2",Name:e.profile_Image.path}};try{const s={Image:o};if((await v.detectFaces(s).promise()).FaceDetails.length>0){const s={SourceImage:l,TargetImage:o,SimilarityThreshold:90},{FaceMatches:n}=await v.compareFaces(s).promise();console.log("Length of facematches",n.length),n&&n.length>0?await Promise.all(n.map((o=>{const s=o.Similarity;console.log("similarity:",s),console.log("######## value.DEVICEFCMTOKEN",e.email),console.log("######## value.DEVICEFCMTOKEN",e.DEVICEFCMTOKEN),"string"==typeof e.DEVICEFCMTOKEN&&(console.log("this expected thing is run"),P(e.DEVICEFCMTOKEN,e.name),t.push(e),console.log(t,"finalResult000000"))}))):console.log("No matching faces found.")}}catch(e){return void console.error("Error:",e)}}catch(e){const o=[];console.log(e),o.push(e)}})));e.then((()=>{if(console.log(t,"finalResult313132132132"),t.length>0)return console.log("this is run ())()()()()()(("),void o.status(200).json(t);o.json({msg:"No matching faces found."})}))}catch(e){console.log("error of daata",e)}}))}catch(e){console.log("errrrro=>>",e),console.log("err.__type",e.__type),console.log("err.__type",e.Code),fResult={message:e,status:400}}})),o.get("/test1",((e,o)=>{console.log("asdjasd"),o.send("<a href='www.mozziyapp.com'><h1>hello</h1></a>")})),o.get("/stripetest",(async(e,o)=>{const t=await S.accounts.create({type:"standard",email:"test@test.com",business_type:"individual",country:"US",default_currency:"usd"});console.log(t,"account")})),o.post("/checkConnectAccountExists",(async(e,o)=>{console.log("hai this is running");try{console.log(e.body,"asdaskj"),console.log("this i s run 1"),await r.connect();const t=r.db("mozziy_new").collection("User");console.log("this i s run 2");const s=await t.findOne({_id:new n(e.body.id)});console.log(s,"this is the resulr"),console.log("this i s run 3"),s.connectAccountId?o.status(200).send({msg:"Stripe account exists",Status:"Success",statusCode:200}):o.status(400).send({msg:"Stripe account does not exist",Status:"Failed",statusCode:400})}catch(e){console.log("err=>",e),o.send({msg:e})}}));const E=async(e,o)=>{try{const t=await S.charges.list({payment_intent:o});console.log("paymentIntent",t.data[0].balance_transaction);const s=await S.balanceTransactions.retrieve(t.data[0].balance_transaction);console.log("balanceTransaction",s);const n=s.net-30*s.amount/100;console.log("amountToSendToSeller",n),S.transfers.create({amount:n,currency:"usd",destination:e}).then((e=>{console.log("Transfer successful:",e)})).catch((e=>{console.error("Error:",e)}))}catch(e){console.log("err",e)}};o.post("/api/getPurchases",(async(e,o)=>{try{await r.connect();const t=r.db("mozziy_new"),s=t.collection("purchases"),a=await s.find({purchaser:new n(e.body.userId)}).toArray(),i=t.collection("Event"),c=[];Promise.all(a.map((async e=>{const o=await i.findOne({_id:e.event_id});o&&c.push(o)}))).then((()=>{o.send({events:c})}))}catch(e){console.log("ERROR",e),o.status(400).send({message:e,status:400})}})),o.post("/getLoggedInUserName",(async(e,o)=>{try{console.log("this is run"),await r.connect();const t=r.db("mozziy_new").collection("User");console.log("id",e.body.id);const s=await t.findOne({_id:new n(e.body.id)});console.log("result",s);let a=s.name,i=s.email,c=s.connectAccountId;await S.balance.retrieve({stripeAccount:c},(function(e,t){e?console.error("Error retrieving balance:",e):(t=t.available[0].amount/100,o.send({name:a,balance:t,email:i}))}))}catch(e){console.log("ERROR",e),o.status(400).send({message:e,status:400})}})),o.post("/api/setFcmToken",(async(e,o)=>{try{console.log("this is run setFcmToken"),console.log("this is run setFcmToken"),console.log("this is run setFcmToken"),console.log("this is run setFcmToken"),console.log("request body is of the setFCMTOKEN API ",e.body),await r.connect();const t=r.db("mozziy_new").collection("User"),s=await t.findOneAndUpdate({_id:new n(e.body.userId)},{$set:{DEVICEFCMTOKEN:e.body.FCMTOKEN}},{upsert:!0,returnDocument:"after"});console.log("result of the setFCMTOKEN API",s),s&&o.status(200).send({msg:"Fcm Token saved successfully",status:!0,statusCode:200})}catch(e){console.log(e),o.status(400).send({msg:e,status:!1,statusCode:400})}})),o.post("/api/deleteFCMTOKEN",(async(e,o)=>{try{console.log("this is run deleteFCMTOKEN"),console.log("this is run deleteFCMTOKEN"),console.log("this is run deleteFCMTOKEN"),console.log("this is run deleteFCMTOKEN"),console.log("request body is ",e.body),await r.connect();const t=r.db("mozziy_new").collection("User"),s=await t.findOne({_id:new n(e.body.userId)});console.log("^^^^^^^",s,"&&&&&&&");const a=await t.updateOne({_id:new n(e.body.userId)},{$unset:{DEVICEFCMTOKEN:""}});console.log(`${a.matchedCount} document(s) matched and ${a.modifiedCount} document(s) modified`),console.log("result",a),a.matchedCount>0?o.status(200).send({msg:"Fcm Token deleted successfully",status:!0,statusCode:200}):o.status(400).send({msg:"Some Error",status:!1,statusCode:400})}catch(e){console.log(e),o.status(400).send({msg:e,status:!1,statusCode:400})}})),o.post("/api/deleteAccount",(async(e,o)=>{try{await r.connect();const t=r.db("mozziy_new").collection("User"),s=await t.deleteOne({_id:new n(e.body.userId)});console.log(s),s&&o.send({msg:"Account Deleted Successfully",Status:400})}catch(e){console.log("Error==>",e),o.status(400).send({msg:e,Status:400,statusCode:400})}})),o.get("/api/privacyPolicy",((e,o)=>{o.send(f)})),o.listen(l,(()=>{console.log("SERVER RUNNING ON PORT ",l)}))})()})();